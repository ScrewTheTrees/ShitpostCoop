import * as ts from "typescript";
export declare enum SyntaxKind {
    Block = 0,
    DoStatement = 1,
    VariableDeclarationStatement = 2,
    AssignmentStatement = 3,
    IfStatement = 4,
    WhileStatement = 5,
    RepeatStatement = 6,
    ForStatement = 7,
    ForInStatement = 8,
    GotoStatement = 9,
    LabelStatement = 10,
    ReturnStatement = 11,
    BreakStatement = 12,
    ExpressionStatement = 13,
    StringLiteral = 14,
    NumericLiteral = 15,
    NilKeyword = 16,
    DotsKeyword = 17,
    TrueKeyword = 18,
    FalseKeyword = 19,
    FunctionExpression = 20,
    TableFieldExpression = 21,
    TableExpression = 22,
    UnaryExpression = 23,
    BinaryExpression = 24,
    ParenthesizedExpression = 25,
    CallExpression = 26,
    MethodCallExpression = 27,
    Identifier = 28,
    TableIndexExpression = 29,
    AdditionOperator = 30,
    SubtractionOperator = 31,
    MultiplicationOperator = 32,
    DivisionOperator = 33,
    FloorDivisionOperator = 34,
    ModuloOperator = 35,
    PowerOperator = 36,
    NegationOperator = 37,
    ConcatOperator = 38,
    LengthOperator = 39,
    EqualityOperator = 40,
    InequalityOperator = 41,
    LessThanOperator = 42,
    LessEqualOperator = 43,
    GreaterThanOperator = 44,
    GreaterEqualOperator = 45,
    AndOperator = 46,
    OrOperator = 47,
    NotOperator = 48,
    BitwiseAndOperator = 49,
    BitwiseOrOperator = 50,
    BitwiseExclusiveOrOperator = 51,
    BitwiseRightShiftOperator = 52,
    BitwiseLeftShiftOperator = 53,
    BitwiseNotOperator = 54
}
export declare type UnaryBitwiseOperator = SyntaxKind.BitwiseNotOperator;
export declare type UnaryOperator = SyntaxKind.NegationOperator | SyntaxKind.LengthOperator | SyntaxKind.NotOperator | UnaryBitwiseOperator;
export declare type BinaryBitwiseOperator = SyntaxKind.BitwiseAndOperator | SyntaxKind.BitwiseOrOperator | SyntaxKind.BitwiseExclusiveOrOperator | SyntaxKind.BitwiseRightShiftOperator | SyntaxKind.BitwiseLeftShiftOperator;
export declare type BinaryOperator = SyntaxKind.AdditionOperator | SyntaxKind.SubtractionOperator | SyntaxKind.MultiplicationOperator | SyntaxKind.DivisionOperator | SyntaxKind.FloorDivisionOperator | SyntaxKind.ModuloOperator | SyntaxKind.PowerOperator | SyntaxKind.ConcatOperator | SyntaxKind.EqualityOperator | SyntaxKind.InequalityOperator | SyntaxKind.LessThanOperator | SyntaxKind.LessEqualOperator | SyntaxKind.GreaterThanOperator | SyntaxKind.GreaterEqualOperator | SyntaxKind.AndOperator | SyntaxKind.OrOperator | BinaryBitwiseOperator;
export declare type Operator = UnaryOperator | BinaryOperator;
export declare type SymbolId = number;
export interface TextRange {
    line?: number;
    column?: number;
}
export interface Node extends TextRange {
    kind: SyntaxKind;
    parent?: Node;
}
export declare function createNode(kind: SyntaxKind, tsOriginal?: ts.Node, parent?: Node): Node;
export declare function cloneNode<T extends Node>(node: T): T;
export declare function setNodePosition<T extends Node>(node: T, position: TextRange): T;
export declare function setNodeOriginal<T extends Node>(node: T, tsOriginal: ts.Node): T;
export declare function setNodeOriginal<T extends Node>(node: T | undefined, tsOriginal: ts.Node): T | undefined;
export declare function setParent(node: Node | Node[] | undefined, parent: Node): void;
export declare function getOriginalPos(node: Node): TextRange;
export interface Block extends Node {
    kind: SyntaxKind.Block;
    statements: Statement[];
}
export declare function isBlock(node: Node): node is Block;
export declare function createBlock(statements: Statement[], tsOriginal?: ts.Node, parent?: Node): Block;
export interface Statement extends Node {
    _statementBrand: any;
}
export interface DoStatement extends Statement {
    kind: SyntaxKind.DoStatement;
    statements: Statement[];
}
export declare function isDoStatement(node: Node): node is DoStatement;
export declare function createDoStatement(statements: Statement[], tsOriginal?: ts.Node, parent?: Node): DoStatement;
export interface VariableDeclarationStatement extends Statement {
    kind: SyntaxKind.VariableDeclarationStatement;
    left: Identifier[];
    right?: Expression[];
}
export declare function isVariableDeclarationStatement(node: Node): node is VariableDeclarationStatement;
export declare function createVariableDeclarationStatement(left: Identifier | Identifier[], right?: Expression | Expression[], tsOriginal?: ts.Node, parent?: Node): VariableDeclarationStatement;
export interface AssignmentStatement extends Statement {
    kind: SyntaxKind.AssignmentStatement;
    left: AssignmentLeftHandSideExpression[];
    right: Expression[];
}
export declare function isAssignmentStatement(node: Node): node is AssignmentStatement;
export declare function createAssignmentStatement(left: AssignmentLeftHandSideExpression | AssignmentLeftHandSideExpression[], right?: Expression | Expression[], tsOriginal?: ts.Node, parent?: Node): AssignmentStatement;
export interface IfStatement extends Statement {
    kind: SyntaxKind.IfStatement;
    condition: Expression;
    ifBlock: Block;
    elseBlock?: Block | IfStatement;
}
export declare function isIfStatement(node: Node): node is IfStatement;
export declare function createIfStatement(condition: Expression, ifBlock: Block, elseBlock?: Block | IfStatement, tsOriginal?: ts.Node, parent?: Node): IfStatement;
export interface IterationStatement extends Statement {
    body: Block;
}
export declare function isIterationStatement(node: Node): node is IterationStatement;
export interface WhileStatement extends IterationStatement {
    kind: SyntaxKind.WhileStatement;
    condition: Expression;
}
export declare function isWhileStatement(node: Node): node is WhileStatement;
export declare function createWhileStatement(body: Block, condition: Expression, tsOriginal?: ts.Node, parent?: Node): WhileStatement;
export interface RepeatStatement extends IterationStatement {
    kind: SyntaxKind.RepeatStatement;
    condition: Expression;
}
export declare function isRepeatStatement(node: Node): node is RepeatStatement;
export declare function createRepeatStatement(body: Block, condition: Expression, tsOriginal?: ts.Node, parent?: Node): RepeatStatement;
export interface ForStatement extends IterationStatement {
    kind: SyntaxKind.ForStatement;
    controlVariable: Identifier;
    controlVariableInitializer: Expression;
    limitExpression: Expression;
    stepExpression?: Expression;
}
export declare function isForStatement(node: Node): node is ForStatement;
export declare function createForStatement(body: Block, controlVariable: Identifier, controlVariableInitializer: Expression, limitExpression: Expression, stepExpression?: Expression, tsOriginal?: ts.Node, parent?: Node): ForStatement;
export interface ForInStatement extends IterationStatement {
    kind: SyntaxKind.ForInStatement;
    names: Identifier[];
    expressions: Expression[];
}
export declare function isForInStatement(node: Node): node is ForInStatement;
export declare function createForInStatement(body: Block, names: Identifier[], expressions: Expression[], tsOriginal?: ts.Node, parent?: Node): ForInStatement;
export interface GotoStatement extends Statement {
    kind: SyntaxKind.GotoStatement;
    label: string;
}
export declare function isGotoStatement(node: Node): node is GotoStatement;
export declare function createGotoStatement(label: string, tsOriginal?: ts.Node, parent?: Node): GotoStatement;
export interface LabelStatement extends Statement {
    kind: SyntaxKind.LabelStatement;
    name: string;
}
export declare function isLabelStatement(node: Node): node is LabelStatement;
export declare function createLabelStatement(name: string, tsOriginal?: ts.Node, parent?: Node): LabelStatement;
export interface ReturnStatement extends Statement {
    kind: SyntaxKind.ReturnStatement;
    expressions?: Expression[];
}
export declare function isReturnStatement(node: Node): node is ReturnStatement;
export declare function createReturnStatement(expressions?: Expression[], tsOriginal?: ts.Node, parent?: Node): ReturnStatement;
export interface BreakStatement extends Statement {
    kind: SyntaxKind.BreakStatement;
}
export declare function isBreakStatement(node: Node): node is BreakStatement;
export declare function createBreakStatement(tsOriginal?: ts.Node, parent?: Node): BreakStatement;
export interface ExpressionStatement extends Statement {
    kind: SyntaxKind.ExpressionStatement;
    expression: Expression;
}
export declare function isExpressionStatement(node: Node): node is ExpressionStatement;
export declare function createExpressionStatement(expressions: Expression, tsOriginal?: ts.Node, parent?: Node): ExpressionStatement;
export interface Expression extends Node {
    _expressionBrand: any;
}
export interface NilLiteral extends Expression {
    kind: SyntaxKind.NilKeyword;
}
export declare function isNilLiteral(node: Node): node is NilLiteral;
export declare function createNilLiteral(tsOriginal?: ts.Node, parent?: Node): NilLiteral;
export interface BooleanLiteral extends Expression {
    kind: SyntaxKind.TrueKeyword | SyntaxKind.FalseKeyword;
}
export declare function isBooleanLiteral(node: Node): node is BooleanLiteral;
export declare function createBooleanLiteral(value: boolean, tsOriginal?: ts.Node, parent?: Node): BooleanLiteral;
export interface DotsLiteral extends Expression {
    kind: SyntaxKind.DotsKeyword;
}
export declare function isDotsLiteral(node: Node): node is DotsLiteral;
export declare function createDotsLiteral(tsOriginal?: ts.Node, parent?: Node): DotsLiteral;
export interface NumericLiteral extends Expression {
    kind: SyntaxKind.NumericLiteral;
    value: number;
}
export declare function isNumericLiteral(node: Node): node is NumericLiteral;
export declare function createNumericLiteral(value: number, tsOriginal?: ts.Node, parent?: Node): NumericLiteral;
export interface StringLiteral extends Expression {
    kind: SyntaxKind.StringLiteral;
    value: string;
}
export declare function isStringLiteral(node: Node): node is StringLiteral;
export declare function createStringLiteral(value: string | ts.__String, tsOriginal?: ts.Node, parent?: Node): StringLiteral;
export declare enum FunctionExpressionFlags {
    None = 0,
    Inline = 1,
    Declaration = 2
}
export interface FunctionExpression extends Expression {
    kind: SyntaxKind.FunctionExpression;
    params?: Identifier[];
    dots?: DotsLiteral;
    restParamName?: Identifier;
    body: Block;
    flags: FunctionExpressionFlags;
}
export declare function isFunctionExpression(node: Node): node is FunctionExpression;
export declare function createFunctionExpression(body: Block, params?: Identifier[], dots?: DotsLiteral, restParamName?: Identifier, flags?: FunctionExpressionFlags, tsOriginal?: ts.Node, parent?: Node): FunctionExpression;
export interface TableFieldExpression extends Expression {
    kind: SyntaxKind.TableFieldExpression;
    value: Expression;
    key?: Expression;
}
export declare function isTableFieldExpression(node: Node): node is TableFieldExpression;
export declare function createTableFieldExpression(value: Expression, key?: Expression, tsOriginal?: ts.Node, parent?: Node): TableFieldExpression;
export interface TableExpression extends Expression {
    kind: SyntaxKind.TableExpression;
    fields?: TableFieldExpression[];
}
export declare function isTableExpression(node: Node): node is TableExpression;
export declare function createTableExpression(fields?: TableFieldExpression[], tsOriginal?: ts.Node, parent?: Node): TableExpression;
export interface UnaryExpression extends Expression {
    kind: SyntaxKind.UnaryExpression;
    operand: Expression;
    operator: UnaryOperator;
}
export declare function isUnaryExpression(node: Node): node is UnaryExpression;
export declare function createUnaryExpression(operand: Expression, operator: UnaryOperator, tsOriginal?: ts.Node, parent?: Node): UnaryExpression;
export interface BinaryExpression extends Expression {
    kind: SyntaxKind.BinaryExpression;
    operator: BinaryOperator;
    left: Expression;
    right: Expression;
}
export declare function isBinaryExpression(node: Node): node is BinaryExpression;
export declare function createBinaryExpression(left: Expression, right: Expression, operator: BinaryOperator, tsOriginal?: ts.Node, parent?: Node): BinaryExpression;
export interface ParenthesizedExpression extends Expression {
    kind: SyntaxKind.ParenthesizedExpression;
    innerExpression: Expression;
}
export declare function isParenthesizedExpression(node: Node): node is ParenthesizedExpression;
export declare function createParenthesizedExpression(innerExpression: Expression, tsOriginal?: ts.Node, parent?: Node): ParenthesizedExpression;
export interface CallExpression extends Expression {
    kind: SyntaxKind.CallExpression;
    expression: Expression;
    params?: Expression[];
}
export declare function isCallExpression(node: Node): node is CallExpression;
export declare function createCallExpression(expression: Expression, params?: Expression[], tsOriginal?: ts.Node, parent?: Node): CallExpression;
export interface MethodCallExpression extends Expression {
    kind: SyntaxKind.MethodCallExpression;
    prefixExpression: Expression;
    name: Identifier;
    params?: Expression[];
}
export declare function isMethodCallExpression(node: Node): node is MethodCallExpression;
export declare function createMethodCallExpression(prefixExpression: Expression, name: Identifier, params?: Expression[], tsOriginal?: ts.Node, parent?: Node): MethodCallExpression;
export interface Identifier extends Expression {
    kind: SyntaxKind.Identifier;
    text: string;
    symbolId?: SymbolId;
}
export declare function isIdentifier(node: Node): node is Identifier;
export declare function createIdentifier(text: string | ts.__String, tsOriginal?: ts.Node, symbolId?: SymbolId, parent?: Node): Identifier;
export declare function cloneIdentifier(identifier: Identifier, tsOriginal?: ts.Node): Identifier;
export declare function createAnonymousIdentifier(tsOriginal?: ts.Node, parent?: Node): Identifier;
export interface TableIndexExpression extends Expression {
    kind: SyntaxKind.TableIndexExpression;
    table: Expression;
    index: Expression;
}
export declare function isTableIndexExpression(node: Node): node is TableIndexExpression;
export declare function createTableIndexExpression(table: Expression, index: Expression, tsOriginal?: ts.Node, parent?: Node): TableIndexExpression;
export declare type AssignmentLeftHandSideExpression = Identifier | TableIndexExpression;
export declare type FunctionDefinition = (VariableDeclarationStatement | AssignmentStatement) & {
    right: [FunctionExpression];
};
export declare function isFunctionDefinition(statement: VariableDeclarationStatement | AssignmentStatement): statement is FunctionDefinition;
export declare type InlineFunctionExpression = FunctionExpression & {
    body: {
        statements: [ReturnStatement & {
            expressions: Expression[];
        }];
    };
};
export declare function isInlineFunctionExpression(expression: FunctionExpression): expression is InlineFunctionExpression;
