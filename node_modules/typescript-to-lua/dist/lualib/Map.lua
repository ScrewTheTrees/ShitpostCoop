--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
Map = (function()
    Map = {}
    Map.name = "Map"
    Map.__index = Map
    Map.prototype = {}
    Map.prototype.__index = Map.prototype
    Map.prototype.constructor = Map
    function Map.new(...)
        local self = setmetatable({}, Map.prototype)
        self:____constructor(...)
        return self
    end
    function Map.prototype.____constructor(self, entries)
        self[Symbol.toStringTag] = "Map"
        self.items = {}
        self.size = 0
        if entries == nil then
            return
        end
        local iterable = entries
        if iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            while true do
                local result = iterator:next()
                if result.done then
                    break
                end
                local value = result.value
                self:set(value[1], value[2])
            end
        else
            local array = entries
            self.size = #array
            for ____, kvp in ipairs(array) do
                self.items[kvp[1]] = kvp[2]
            end
        end
    end
    function Map.prototype.clear(self)
        self.items = {}
        self.size = 0
        return
    end
    function Map.prototype.delete(self, key)
        local contains = self:has(key)
        if contains then
            self.size = self.size - 1
        end
        self.items[key] = nil
        return contains
    end
    function Map.prototype.forEach(self, callback)
        for key in pairs(self.items) do
            callback(_G, self.items[key], key, self)
        end
        return
    end
    function Map.prototype.get(self, key)
        return self.items[key]
    end
    function Map.prototype.has(self, key)
        return self.items[key] ~= nil
    end
    function Map.prototype.set(self, key, value)
        if not self:has(key) then
            self.size = self.size + 1
        end
        self.items[key] = value
        return self
    end
    Map.prototype[Symbol.iterator] = function(self)
        return self:entries()
    end
    function Map.prototype.entries(self)
        local items = self.items
        local key
        local value
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                key, value = next(items, key)
                return {
                    done = not key,
                    value = {
                        key,
                        value,
                    },
                }
            end,
        }
    end
    function Map.prototype.keys(self)
        local items = self.items
        local key
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                key = next(items, key)
                return {
                    done = not key,
                    value = key,
                }
            end,
        }
    end
    function Map.prototype.values(self)
        local items = self.items
        local key
        local value
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                key, value = next(items, key)
                return {
                    done = not key,
                    value = value,
                }
            end,
        }
    end
    Map[Symbol.species] = Map
    return Map
end)()
