--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
Set = (function()
    Set = {}
    Set.name = "Set"
    Set.__index = Set
    Set.prototype = {}
    Set.prototype.__index = Set.prototype
    Set.prototype.constructor = Set
    function Set.new(...)
        local self = setmetatable({}, Set.prototype)
        self:____constructor(...)
        return self
    end
    function Set.prototype.____constructor(self, values)
        self[Symbol.toStringTag] = "Set"
        self.items = {}
        self.size = 0
        if values == nil then
            return
        end
        local iterable = values
        if iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            while true do
                local result = iterator:next()
                if result.done then
                    break
                end
                self:add(result.value)
            end
        else
            local array = values
            self.size = #array
            for ____, value in ipairs(array) do
                self.items[value] = true
            end
        end
    end
    function Set.prototype.add(self, value)
        if not self:has(value) then
            self.size = self.size + 1
        end
        self.items[value] = true
        return self
    end
    function Set.prototype.clear(self)
        self.items = {}
        self.size = 0
        return
    end
    function Set.prototype.delete(self, value)
        local contains = self:has(value)
        if contains then
            self.size = self.size - 1
        end
        self.items[value] = nil
        return contains
    end
    function Set.prototype.forEach(self, callback)
        for key in pairs(self.items) do
            callback(_G, key, key, self)
        end
    end
    function Set.prototype.has(self, value)
        return self.items[value] == true
    end
    Set.prototype[Symbol.iterator] = function(self)
        return self:values()
    end
    function Set.prototype.entries(self)
        local items = self.items
        local key
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                key = next(items, key)
                return {
                    done = not key,
                    value = {
                        key,
                        key,
                    },
                }
            end,
        }
    end
    function Set.prototype.keys(self)
        local items = self.items
        local key
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                key = next(items, key)
                return {
                    done = not key,
                    value = key,
                }
            end,
        }
    end
    function Set.prototype.values(self)
        local items = self.items
        local key
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                key = next(items, key)
                return {
                    done = not key,
                    value = key,
                }
            end,
        }
    end
    Set[Symbol.species] = Set
    return Set
end)()
