"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Decorator {
    static isValid(decoratorKindString) {
        return this.getDecoratorKind(decoratorKindString) !== undefined;
    }
    static getDecoratorKind(decoratorKindString) {
        switch (decoratorKindString.toLowerCase()) {
            case "extension":
                return DecoratorKind.Extension;
            case "metaextension":
                return DecoratorKind.MetaExtension;
            case "customconstructor":
                return DecoratorKind.CustomConstructor;
            case "compilemembersonly":
                return DecoratorKind.CompileMembersOnly;
            case "noresolution":
                return DecoratorKind.NoResolution;
            case "pureabstract":
                return DecoratorKind.PureAbstract;
            case "phantom":
                return DecoratorKind.Phantom;
            case "tuplereturn":
                return DecoratorKind.TupleReturn;
            case "luaiterator":
                return DecoratorKind.LuaIterator;
            case "luatable":
                return DecoratorKind.LuaTable;
            case "noself":
                return DecoratorKind.NoSelf;
            case "noselfinfile":
                return DecoratorKind.NoSelfInFile;
        }
        return undefined;
    }
    constructor(name, args) {
        const kind = Decorator.getDecoratorKind(name);
        if (kind === undefined) {
            throw new Error(`Failed to parse decorator '${name}'`);
        }
        this.kind = kind;
        this.args = args;
    }
}
exports.Decorator = Decorator;
var DecoratorKind;
(function (DecoratorKind) {
    DecoratorKind["Extension"] = "Extension";
    DecoratorKind["MetaExtension"] = "MetaExtension";
    DecoratorKind["CustomConstructor"] = "CustomConstructor";
    DecoratorKind["CompileMembersOnly"] = "CompileMembersOnly";
    DecoratorKind["NoResolution"] = "NoResolution";
    DecoratorKind["PureAbstract"] = "PureAbstract";
    DecoratorKind["Phantom"] = "Phantom";
    DecoratorKind["TupleReturn"] = "TupleReturn";
    DecoratorKind["LuaIterator"] = "LuaIterator";
    DecoratorKind["LuaTable"] = "LuaTable";
    DecoratorKind["NoSelf"] = "NoSelf";
    DecoratorKind["NoSelfInFile"] = "NoSelfInFile";
})(DecoratorKind = exports.DecoratorKind || (exports.DecoratorKind = {}));
//# sourceMappingURL=Decorator.js.map